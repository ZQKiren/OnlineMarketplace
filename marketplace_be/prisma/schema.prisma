// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  COD
}

// ✨ NEW: Chat related enums
enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

enum ChatStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
}

enum NotificationType {
  NEW_PRODUCT
  PRICE_DROP
  ORDER_UPDATE
  SYSTEM_UPDATE
  PROMOTION
  REVIEW_REMINDER
  STOCK_ALERT
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  name         String
  phone        String?
  avatar       String?
  role         Role      @default(USER)
  isOnline     Boolean   @default(false)  // ✨ NEW: Online status
  lastSeen     DateTime? // ✨ NEW: Last seen timestamp
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]
  orders       Order[]
  reviews      Review[]
  cart         CartItem[]
  
  buyerChats   Chat[]    @relation("BuyerChats")
  sellerChats  Chat[]    @relation("SellerChats")
  messages     Message[]

  preferences  UserPreference[]
  productViews ProductView[]

  notificationReads NotificationRead[]
}

model Category {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]
  userPreferences UserPreference[]
}

model Product {
  id           String    @id @default(uuid())
  name         String
  description  String
  price        Float
  images       String[]
  stock        Int       @default(0)
  categoryId   String
  sellerId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  category     Category  @relation(fields: [categoryId], references: [id])
  seller       User      @relation(fields: [sellerId], references: [id])
  reviews      Review[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  views        ProductView[]
  
  // ✨ NEW: Chat relationship
  chats        Chat[]
}

model CartItem {
  id           String    @id @default(uuid())
  userId       String
  productId    String
  quantity     Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  totalAmount     Float
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod @default(CARD)
  shippingAddress Json?
  paymentId       String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?
}

model OrderItem {
  id           String    @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  price        Float
  createdAt    DateTime  @default(now())
  
  order        Order     @relation(fields: [orderId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id               String        @id @default(uuid())
  orderId          String        @unique
  stripePaymentId  String?       @unique
  amount           Float
  status           PaymentStatus @default(PENDING)
  method           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  order            Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id           String    @id @default(uuid())
  userId       String
  productId    String
  rating       Int
  comment      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

// ✨ NEW: Chat Models
model Chat {
  id           String      @id @default(uuid())
  productId    String
  buyerId      String
  sellerId     String
  status       ChatStatus  @default(ACTIVE)
  lastMessageAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  product      Product     @relation(fields: [productId], references: [id])
  buyer        User        @relation("BuyerChats", fields: [buyerId], references: [id])
  seller       User        @relation("SellerChats", fields: [sellerId], references: [id])
  messages     Message[]
  
  @@unique([productId, buyerId]) // One chat per product per buyer
}

model Message {
  id           String      @id @default(uuid())
  chatId       String
  senderId     String
  content      String
  type         MessageType @default(TEXT)
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  chat         Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender       User        @relation(fields: [senderId], references: [id])
}

model UserPreference {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  score      Float    @default(1.0) // Điểm sở thích (1-5)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_preferences")
}

model ProductView {
  id        String   @id @default(uuid())
  userId    String?
  productId String
  viewedAt  DateTime @default(now())
  sessionId String? // For anonymous users

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_views")
}

model Notification {
  id          String               @id @default(uuid())
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(MEDIUM)
  isGlobal    Boolean              @default(false) // true = gửi cho tất cả users
  targetUsers String[]             // array user IDs (nếu không global)
  metadata    Json?                // thông tin bổ sung (productId, orderId, etc.)
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  // Quan hệ với notification reads
  reads       NotificationRead[]
  
  @@map("notifications")
}

model NotificationRead {
  id             String       @id @default(uuid())
  notificationId String
  userId         String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([notificationId, userId])
  @@map("notification_reads")
}