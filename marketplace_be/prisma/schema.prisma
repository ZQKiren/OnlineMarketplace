// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  COD
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  name         String
  phone        String?
  avatar       String?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]
  orders       Order[]
  reviews      Review[]
  cart         CartItem[]
}

model Category {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]
}

model Product {
  id           String    @id @default(uuid())
  name         String
  description  String
  price        Float
  images       String[]
  stock        Int       @default(0)
  categoryId   String
  sellerId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  category     Category  @relation(fields: [categoryId], references: [id])
  seller       User      @relation(fields: [sellerId], references: [id])
  reviews      Review[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model CartItem {
  id           String    @id @default(uuid())
  userId       String
  productId    String
  quantity     Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  totalAmount     Float
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod @default(CARD)  // ← THÊM MỚI
  shippingAddress Json?                         // ← THÊM MỚI
  paymentId       String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?
}

model OrderItem {
  id           String    @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  price        Float
  createdAt    DateTime  @default(now())
  
  order        Order     @relation(fields: [orderId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id               String        @id @default(uuid())
  orderId          String        @unique
  stripePaymentId  String?       @unique
  amount           Float
  status           PaymentStatus @default(PENDING)
  method           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  order            Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id           String    @id @default(uuid())
  userId       String
  productId    String
  rating       Int
  comment      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}